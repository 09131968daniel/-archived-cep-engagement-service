# #Here is the database source. The db on your server.
# spring.datasource.url = jdbc:postgresql://localhost:5432/${DB_NAME}
# ##Insert your credentials here.
# ##Maybe use Credentials when building with JENKINS?
# spring.datasource.username=${DB_USERNAME}
# spring.datasource.password=${DB_PASSWORD}
# ##For testing purposes. In production change to validate.
# spring.jpa.hibernate.ddl-auto=create-drop

#SQL dialect makes hibernate generate sql for the chosen databse.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


#the below is the H2 configuration and some other s
#changing testdeb to
spring.datasource.url=jdbc:h2:mem:testdb;MODE=PostgreSQL
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.data=classpath:data.sql
spring.h2.console.enabled=true

#changed from sa to user
spring.datasource.username=sa
spring.datasource.password=
#
spring.jpa.generate-ddl=true
##If use create-drop, then CONSTRAINTS GET DROPPED FIRST.
##May throw if constraints are not there.
spring.jpa.hibernate.ddl-auto=create
#
#spring.datasource.data=Data.sql
##SQL dialect makes hibernate generate sql for the chosen databse.
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#
#spring.resources.add-mappings=true
#
##Interesting
##spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#
#
#Change port
server.port=10000
##Security, take out when not needed.
spring.security.user.name=user
spring.security.user.password=password
#
##spring.main.allow-bean-definition-overriding=true
##JWT Env variables
jwt.signing.key.secret = WeDaBestMusic
jwt.get.token.uri = /authenticate
jwt.refresh.token.uri = /refresh
jwt.http.request.header = Authorization
jwt.token.expiration.in.seconds = 604800

jwt.post.user.uri = /users/add

#Env variable for all email route validation
key.allemail = SecretEmailKey

#Caliber API endpoints
caliber.api = http://34.82.182.44:80/mock/
caliber.api.batch = ${caliber.api}training/batch
caliber.api.assessments = ${caliber.api}evaluation/assessments
caliber.api.category = ${caliber.api}category/category
spidergraph.caliber = ${caliber.api}evaluation/grades/reports

#FrontEnd URi
frontend.uri = http://localhost:3000

#Zuul URI
zuul.microservice.uri = http://localhost:9015

#Add properties of micro-service in here
#server.port=0

spring.application.name=cep-engagement-service

eureka.client.service-url.defaultZone=http://${EUREKA_HOSTED_IP:127.0.0.1}:9999/eureka
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true

eureka.prefer-ip-address=true

#This is to implement the additional property files depending on which environment profile
#you are using

spring.profiles.active=@activatedProperties@
